"use client";

import { useState, useEffect, use, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Trophy, Crown, Medal, Users, Calendar } from "lucide-react";
import { Match, Pair, Tournament } from "@/types";
import {
  getTournaments,
  getCategories,
  getPairs,
  getKnockoutMatches,
  getAllMatchesByCategory,
} from "@/lib/supabase-queries";
import { useRealtimeMatches } from "@/hooks/useRealtimeMatches";
import { useRealtimeStandings } from "@/hooks/useRealtimeStandings";
import { RealtimeIndicator } from "@/components/realtime/RealtimeIndicator";

interface PublicTournamentPageProps {
  params: Promise<{
    slug: string;
  }>;
}

export default function PublicTournamentPage({
  params,
}: PublicTournamentPageProps) {
  const resolvedParams = use(params);
  const [tournament, setTournament] = useState<Tournament | null>(null);
  const [allPairs, setAllPairs] = useState<Pair[]>([]);
  const [currentCategory, setCurrentCategory] = useState<{ id: string } | null>(
    null
  );
  const [loading, setLoading] = useState(true);

  // Hooks de tiempo real
  const { matches: knockoutMatches, isConnected: isMatchesConnected } =
    useRealtimeMatches({
      categoryId: currentCategory?.id || "",
      initialMatches: [],
    });

  const {
    standings: summary,
    isLoading: isStandingsLoading,
    lastUpdate: standingsLastUpdate,
  } = useRealtimeStandings({
    categoryId: currentCategory?.id || "",
    allPairs,
  });

  const fetchTournamentData = useCallback(async () => {
    try {
      setLoading(true);

      // Buscar torneo por slug
      const tournaments = await getTournaments();
      const currentTournament = tournaments.find(
        (t) => t.slug === resolvedParams.slug
      );

      if (!currentTournament) {
        setLoading(false);
        return;
      }

      setTournament(currentTournament);

      // Obtener categor√≠as
      const categories = await getCategories(currentTournament.id);
      if (categories.length === 0) {
        setLoading(false);
        return;
      }

      const firstCategory = categories[0];
      setCurrentCategory(firstCategory);

      // Obtener parejas y partidos
      const [pairsData, knockoutData] = await Promise.all([
        getPairs(firstCategory.id),
        getKnockoutMatches(firstCategory.id),
      ]);

      setAllPairs(pairsData);
      setKnockoutMatches(knockoutData);
    } catch (error) {
      console.error("Error loading tournament data:", error);
    } finally {
      setLoading(false);
    }
  }, [resolvedParams.slug]);

  const getPairById = (pairId: string) => {
    return allPairs.find((p) => p.id === pairId);
  };

  const formatPairName = (pair?: Pair) => {
    if (!pair) return "Pareja no encontrada";
    return `${pair.player1.name} / ${pair.player2.name}`;
  };

  const getMatchesByStage = (stage: string) => {
    return knockoutMatches
      .filter((m) => m.stage === stage)
      .sort((a, b) => (a.matchNumber || 0) - (b.matchNumber || 0));
  };

  // Generar resumen de resultados (ACTUALIZADO para incluir partidos de grupos)
  // Ya no necesitamos generateTournamentSummary - se actualiza autom√°ticamente via hooks de tiempo real

  const pairStats = new Map<
    string,
    {
      pair: Pair;
      matchesPlayed: number;
      matchesWon: number;
      matchesLost: number;
      setsWon: number;
      setsLost: number;
      gamesWon: number;
      gamesLost: number;
      winRate: number;
      position: number;
      trophy: string;
    }
  >();

  // Inicializar estad√≠sticas para TODAS las parejas del torneo
  allPairs.forEach((pair: Pair) => {
    pairStats.set(pair.id, {
      pair,
      matchesPlayed: 0,
      matchesWon: 0,
      matchesLost: 0,
      setsWon: 0,
      setsLost: 0,
      gamesWon: 0,
      gamesLost: 0,
      winRate: 0,
      position: 0,
      trophy: "",
    });
  });

  // Calcular estad√≠sticas para todos los partidos finalizados
  finishedMatches.forEach((match) => {
    const pairAStats = pairStats.get(match.pairAId);
    const pairBStats = pairStats.get(match.pairBId);

    if (pairAStats && pairBStats) {
      // Contar partidos jugados
      pairAStats.matchesPlayed++;
      pairBStats.matchesPlayed++;

      // Contar victorias/derrotas basado en winnerPairId
      if (match.winnerPairId === match.pairAId) {
        pairAStats.matchesWon++;
        pairBStats.matchesLost++;
      } else if (match.winnerPairId === match.pairBId) {
        pairBStats.matchesWon++;
        pairAStats.matchesLost++;
      }

      // Procesar scores detallados si est√°n disponibles
      if (match.scorePairA && match.scorePairB) {
        const scoreA = match.scorePairA;
        const scoreB = match.scorePairB;

        let setsA = 0;
        let setsB = 0;
        const gamesA =
          scoreA.set1 +
          scoreA.set2 +
          (scoreA.set3 || 0) +
          (scoreA.superDeath || 0);
        const gamesB =
          scoreB.set1 +
          scoreB.set2 +
          (scoreB.set3 || 0) +
          (scoreB.superDeath || 0);

        // Contar sets ganados
        if (scoreA.set1 > scoreB.set1) setsA++;
        else setsB++;
        if (scoreA.set2 > scoreB.set2) setsA++;
        else setsB++;
        if (scoreA.set3 !== undefined && scoreB.set3 !== undefined) {
          if (scoreA.set3 > scoreB.set3) setsA++;
          else setsB++;
        }

        pairAStats.setsWon += setsA;
        pairAStats.setsLost += setsB;
        pairAStats.gamesWon += gamesA;
        pairAStats.gamesLost += gamesB;

        pairBStats.setsWon += setsB;
        pairBStats.setsLost += setsA;
        pairBStats.gamesWon += gamesB;
        pairBStats.gamesLost += gamesA;
      }
    }
  });

  // Calcular winRate para todas las parejas
  pairStats.forEach((stats) => {
    stats.winRate =
      stats.matchesPlayed > 0
        ? (stats.matchesWon / stats.matchesPlayed) * 100
        : 0;
  });

  // Determinar posiciones basadas en finishedMatches procesados
  const finalMatch = finishedMatches.find((m) => m.stage === "final");
  const thirdPlaceMatch = finishedMatches.find(
    (m) => m.stage === "third_place"
  );

  if (finalMatch) {
    const champion = pairStats.get(finalMatch.winnerPairId!);
    if (champion) {
      champion.position = 1;
      champion.trophy = "ü•á";
    }

    const runnerUp = pairStats.get(
      finalMatch.pairAId === finalMatch.winnerPairId
        ? finalMatch.pairBId
        : finalMatch.pairAId
    );
    if (runnerUp) {
      runnerUp.position = 2;
      runnerUp.trophy = "ü•à";
    }
  }

  if (thirdPlaceMatch) {
    const thirdPlace = pairStats.get(thirdPlaceMatch.winnerPairId!);
    if (thirdPlace) {
      thirdPlace.position = 3;
      thirdPlace.trophy = "ü•â";
    }

    const fourthPlace = pairStats.get(
      thirdPlaceMatch.pairAId === thirdPlaceMatch.winnerPairId
        ? thirdPlaceMatch.pairBId
        : thirdPlaceMatch.pairAId
    );
    if (fourthPlace) {
      fourthPlace.position = 4;
      fourthPlace.trophy = "4Ô∏è‚É£";
    }
  }

  return Array.from(pairStats.values()).sort((a, b) => {
    if (a.position === 0 && b.position === 0) return 0;
    if (a.position === 0) return 1;
    if (b.position === 0) return -1;
    return a.position - b.position;
  });

  useEffect(() => {
    fetchTournamentData();
  }, [fetchTournamentData]);

  // Las estad√≠sticas se actualizan autom√°ticamente via hooks de tiempo real
  // useEffect(() => {
  //   const loadTournamentSummary = async () => { ... };
  //   if (currentCategory && allPairs.length > 0) {
  //     loadTournamentSummary();
  //   }
  // }, [...]);

  const formatScore = (match: Match) => {
    if (!match.scorePairA || !match.scorePairB) return "";

    const scoreA = match.scorePairA;
    const scoreB = match.scorePairB;

    let result = `${scoreA.set1}-${scoreB.set1}, ${scoreA.set2}-${scoreB.set2}`;

    if (scoreA.set3 !== undefined && scoreB.set3 !== undefined) {
      result += `, ${scoreA.set3}-${scoreB.set3}`;
    }

    if (scoreA.superDeath !== undefined && scoreB.superDeath !== undefined) {
      result += ` (SD: ${scoreA.superDeath}-${scoreB.superDeath})`;
    }

    return result;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <Trophy className="h-16 w-16 mx-auto mb-4 text-blue-500 animate-pulse" />
          <p className="text-xl text-gray-600">Cargando torneo...</p>
        </div>
      </div>
    );
  }

  if (!tournament) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 flex items-center justify-center">
        <Card className="max-w-md text-center">
          <CardContent className="py-12">
            <Trophy className="h-16 w-16 mx-auto mb-4 text-gray-400" />
            <h2 className="text-2xl font-bold text-gray-700 mb-2">
              Torneo no encontrado
            </h2>
            <p className="text-gray-500">
              El torneo que buscas no existe o no est√° disponible p√∫blicamente.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  const quarterfinals = getMatchesByStage("quarterfinal");
  const semifinals = getMatchesByStage("semifinal");
  const finals = getMatchesByStage("final");
  const thirdPlace = getMatchesByStage("third_place");

  // Debug para verificar datos
  console.log("üîç Public View Debug:", {
    summaryLength: summary.length,
    knockoutMatchesLength: knockoutMatches.length,
    quarterfinalsLength: quarterfinals.length,
    summary: summary.map((s) => ({
      pair: `${s.pair.player1.name}/${s.pair.player2.name}`,
      position: s.position,
      matchesPlayed: s.matchesPlayed,
      matchesWon: s.matchesWon,
    })),
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-lg">
        <div className="max-w-6xl mx-auto px-4 py-8">
          <div className="text-center">
            <div className="flex items-center justify-center gap-3 mb-4">
              <Trophy className="h-12 w-12 text-blue-600" />
              <h1 className="text-4xl font-bold text-gray-900">
                {tournament.name}
              </h1>
            </div>
            <div className="flex items-center justify-center gap-6 text-gray-600">
              <div className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                <span>
                  {new Date(tournament.createdAt || "").toLocaleDateString(
                    "es-ES"
                  )}
                </span>
              </div>
              <Badge
                variant="outline"
                className="text-blue-600 border-blue-600"
              >
                Vista P√∫blica
              </Badge>
              <RealtimeIndicator
                isConnected={isMatchesConnected}
                lastUpdate={standingsLastUpdate}
                showLastUpdate={true}
              />
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto px-4 py-8 space-y-8">
        {/* Tabla de Estad√≠sticas Completas */}
        {summary.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-2xl font-bold text-center text-purple-800 flex items-center justify-center gap-3">
                üìä Estad√≠sticas del Torneo
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-gradient-to-r from-purple-100 to-pink-100">
                      <th className="border border-purple-200 px-4 py-3 text-left font-bold">
                        Posici√≥n
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-left font-bold">
                        Pareja
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        PJ
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        PG
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        PP
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        Sets G
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        Sets P
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        Games G
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        Games P
                      </th>
                      <th className="border border-purple-200 px-4 py-3 text-center font-bold">
                        Efectividad
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {summary.map((stat, index) => {
                      const bgColor =
                        stat.position === 1
                          ? "bg-yellow-50"
                          : stat.position === 2
                          ? "bg-gray-50"
                          : stat.position === 3
                          ? "bg-orange-50"
                          : "bg-white";

                      return (
                        <tr
                          key={stat.pair.id}
                          className={`${bgColor} hover:bg-purple-50`}
                        >
                          <td className="border border-purple-200 px-4 py-3 font-bold text-center">
                            <div className="flex items-center justify-center gap-2">
                              <span className="text-2xl">{stat.trophy}</span>
                              <span>
                                {stat.position > 0 ? `${stat.position}¬∞` : "-"}
                              </span>
                            </div>
                          </td>
                          <td className="border border-purple-200 px-4 py-3 font-semibold">
                            {stat.pair.player1.name} / {stat.pair.player2.name}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center">
                            {stat.matchesPlayed}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-semibold text-green-600">
                            {stat.matchesWon}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-semibold text-red-600">
                            {stat.matchesLost}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-semibold text-green-600">
                            {stat.setsWon}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-semibold text-red-600">
                            {stat.setsLost}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-semibold text-green-600">
                            {stat.gamesWon}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-semibold text-red-600">
                            {stat.gamesLost}
                          </td>
                          <td className="border border-purple-200 px-4 py-3 text-center font-bold text-blue-600">
                            {stat.winRate.toFixed(1)}%
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>

              {/* Leyenda */}
              <div className="mt-4 text-sm text-gray-600">
                <p>
                  <strong>PJ:</strong> Partidos Jugados | <strong>PG:</strong>{" "}
                  Partidos Ganados | <strong>PP:</strong> Partidos Perdidos |{" "}
                  <strong>Sets G:</strong> Sets Ganados |{" "}
                  <strong>Sets P:</strong> Sets Perdidos |{" "}
                  <strong>Games G:</strong> Games Ganados |{" "}
                  <strong>Games P:</strong> Games Perdidos
                </p>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Podio de Ganadores */}
        {summary.some((s) => s.position > 0) && (
          <Card>
            <CardHeader>
              <CardTitle className="text-3xl font-bold text-center text-purple-800 flex items-center justify-center gap-3">
                <Crown className="h-8 w-8" />
                üèÜ Ganadores del Torneo
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
                {summary.slice(0, 3).map((stat, index) => {
                  const heights = ["h-32", "h-40", "h-28"];
                  const colors = [
                    "from-yellow-400 to-yellow-600",
                    "from-gray-300 to-gray-500",
                    "from-orange-400 to-orange-600",
                  ];

                  return (
                    <div key={stat.pair.id} className="text-center">
                      <div
                        className={`bg-gradient-to-b ${colors[index]} ${heights[index]} rounded-lg flex items-end justify-center pb-4 mb-4 shadow-lg`}
                      >
                        <div className="text-white">
                          <div className="text-4xl mb-2">{stat.trophy}</div>
                          <div className="font-bold text-lg">
                            {stat.position}¬∞ Lugar
                          </div>
                        </div>
                      </div>
                      <h3 className="font-bold text-lg text-gray-800">
                        {stat.pair.player1.name}
                      </h3>
                      <h3 className="font-bold text-lg text-gray-800 mb-2">
                        {stat.pair.player2.name}
                      </h3>
                      <div className="text-sm text-gray-600">
                        {stat.matchesWon}G - {stat.matchesLost}P
                      </div>
                    </div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Bracket Visual */}
        {knockoutMatches.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-2xl font-bold text-center text-blue-800 flex items-center justify-center gap-3">
                <Medal className="h-6 w-6" />
                Bracket del Torneo
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-8">
                {/* Semifinales */}
                {quarterfinals.length > 0 && (
                  <div>
                    <h3 className="text-xl font-bold text-center mb-4 text-blue-600">
                      Semifinales
                    </h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 max-w-4xl mx-auto">
                      {quarterfinals.map((match) => (
                        <Card key={match.id} className="border-2">
                          <CardContent className="p-4">
                            <div className="space-y-3">
                              <div className="flex justify-between items-center">
                                <span className="font-bold text-blue-600">
                                  {match.bracketPosition}
                                </span>
                                <Badge
                                  variant={
                                    match.status === "finished"
                                      ? "default"
                                      : "secondary"
                                  }
                                >
                                  {match.status === "finished"
                                    ? "Finalizado"
                                    : "Pendiente"}
                                </Badge>
                              </div>

                              <div className="space-y-2">
                                <div
                                  className={`p-2 rounded ${
                                    match.winnerPairId === match.pairAId
                                      ? "bg-green-100 border-2 border-green-500"
                                      : "bg-gray-50"
                                  }`}
                                >
                                  <div className="font-semibold">
                                    {formatPairName(getPairById(match.pairAId))}
                                  </div>
                                </div>
                                <div className="text-center text-sm text-gray-500">
                                  VS
                                </div>
                                <div
                                  className={`p-2 rounded ${
                                    match.winnerPairId === match.pairBId
                                      ? "bg-green-100 border-2 border-green-500"
                                      : "bg-gray-50"
                                  }`}
                                >
                                  <div className="font-semibold">
                                    {formatPairName(getPairById(match.pairBId))}
                                  </div>
                                </div>
                              </div>

                              {match.status === "finished" && (
                                <div className="text-center text-sm text-blue-600 font-medium bg-blue-50 py-2 rounded">
                                  {formatScore(match)}
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}

                {/* Final */}
                {finals.length > 0 && (
                  <div>
                    <h3 className="text-xl font-bold text-center mb-4 text-yellow-600">
                      üèÜ Gran Final
                    </h3>
                    <div className="max-w-md mx-auto">
                      {finals.map((match) => (
                        <Card
                          key={match.id}
                          className="border-4 border-yellow-400"
                        >
                          <CardContent className="p-6">
                            <div className="space-y-4">
                              <div className="text-center">
                                <Badge
                                  variant={
                                    match.status === "finished"
                                      ? "default"
                                      : "secondary"
                                  }
                                  className="text-lg px-4 py-1"
                                >
                                  {match.status === "finished"
                                    ? "¬°FINALIZADO!"
                                    : "Por jugar"}
                                </Badge>
                              </div>

                              <div className="space-y-3">
                                <div
                                  className={`p-3 rounded-lg text-center ${
                                    match.winnerPairId === match.pairAId
                                      ? "bg-yellow-100 border-3 border-yellow-500"
                                      : "bg-gray-50"
                                  }`}
                                >
                                  <div className="font-bold text-lg">
                                    {formatPairName(getPairById(match.pairAId))}
                                  </div>
                                  {match.winnerPairId === match.pairAId && (
                                    <div className="text-yellow-600 font-bold">
                                      üèÜ CAMPEONES
                                    </div>
                                  )}
                                </div>
                                <div className="text-center text-lg font-bold text-gray-500">
                                  VS
                                </div>
                                <div
                                  className={`p-3 rounded-lg text-center ${
                                    match.winnerPairId === match.pairBId
                                      ? "bg-yellow-100 border-3 border-yellow-500"
                                      : "bg-gray-50"
                                  }`}
                                >
                                  <div className="font-bold text-lg">
                                    {formatPairName(getPairById(match.pairBId))}
                                  </div>
                                  {match.winnerPairId === match.pairBId && (
                                    <div className="text-yellow-600 font-bold">
                                      üèÜ CAMPEONES
                                    </div>
                                  )}
                                </div>
                              </div>

                              {match.status === "finished" && (
                                <div className="text-center text-lg font-bold text-yellow-700 bg-yellow-50 py-3 rounded-lg">
                                  {formatScore(match)}
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Footer */}
        <div className="text-center py-8">
          <p className="text-gray-600">
            Powered by{" "}
            <span className="font-bold text-blue-600">MiTorneo App</span> üöÄ
          </p>
        </div>
      </div>
    </div>
  );
}
